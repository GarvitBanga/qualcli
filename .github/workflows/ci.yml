name: AppWright Test Job System

on: [push]

jobs:
  test-job-system:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-server --version"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qualcli
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client redis-tools

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install CLI package
        run: |
          pip install -e .

      - name: Create test file
        run: |
          mkdir -p tests/onboarding
          echo 'console.log("Sample test");' > tests/onboarding/login.spec.js

      - name: Set environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5433/qualcli" >> $GITHUB_ENV
          echo "API_URL=http://localhost:8002" >> $GITHUB_ENV

      - name: Wait for services to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5433 -U postgres; do
            echo "PostgreSQL not ready, waiting..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
          
          echo "Waiting for Redis..."
          until redis-cli -h localhost -p 6379 ping | grep -q PONG; do
            echo "Redis not ready, waiting..."
            sleep 2
          done
          echo "Redis is ready!"

      - name: Initialize database
        run: |
          python scripts/init_db.py
          python scripts/init_devices.py

      - name: Start backend server
        run: |
          nohup uvicorn backend.main:app --host 0.0.0.0 --port 8002 > server.log 2>&1 &
          sleep 10  # Wait for server to start

      - name: Verify backend is running
        run: |
          # Wait for backend to respond
          for i in {1..30}; do
            if curl -f http://localhost:8002/health >/dev/null 2>&1; then
              echo "Backend is responding"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done

      - name: Start Celery worker
        run: |
          nohup celery -A backend.queue.celery_app worker --loglevel=INFO > celery.log 2>&1 &
          sleep 5  # Wait for worker to start

      - name: Submit test job
        run: |
          qgjob submit --org-id=qualgent --app-version-id=xyz123 --test=tests/onboarding/login.spec.js --priority=3 --target=emulator > job_output.txt
          cat job_output.txt

      - name: Extract job ID
        run: |
          # Extract job ID using multiple methods to handle Rich formatting
          JOB_ID=$(grep -oP "Job ID:[^0-9]*\K[0-9]+" job_output.txt || grep -o "Job ID: [0-9]*" job_output.txt | grep -o "[0-9]*" || grep -oE "[0-9]+" job_output.txt | head -1)
          echo "Extracted Job ID: $JOB_ID"
          echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV

      - name: Poll for job completion
        run: |
          echo "Polling job $JOB_ID for completion..."
          
          for i in {1..60}; do
            qgjob status job --job-id=$JOB_ID > status_output.txt 2>&1
            cat status_output.txt
            
            # Check if status command succeeded
            if ! qgjob status job --job-id=$JOB_ID >/dev/null 2>&1; then
              echo "Error getting job status, trying again..."
              sleep 5
              continue
            fi
            
            STATUS=$(grep -o "Status: [a-zA-Z]*" status_output.txt | cut -d' ' -f2 || echo "unknown")
            echo "Job status: $STATUS (check $i/60)"
            
            if [[ "$STATUS" == "completed" ]]; then
              echo "Job completed successfully!"
              cat status_output.txt
              exit 0
            elif [[ "$STATUS" == "failed" ]]; then
              echo "Job failed!"
              cat status_output.txt
              exit 1
            fi
            
            sleep 5
          done
          
          echo "Job did not complete within timeout"
          cat status_output.txt
          exit 1

      - name: Print logs on failure
        if: failure()
        run: |
          echo "=== Server Log ==="
          cat server.log
          echo "=== Celery Log ==="
          cat celery.log
          echo "=== Job Output ==="
          cat job_output.txt
          echo "=== Status Output ==="
          cat status_output.txt 