name: Mobile App Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: qualcli
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Create required directories
      run: |
        mkdir -p logs
        mkdir -p builds

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements.txt
        npm install

    - name: Initialize database
      run: python scripts/init_db.py

    - name: Initialize device pool
      run: python scripts/init_devices.py

    - name: Upload app to BrowserStack
      run: |
        RESPONSE=$(curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" \
          -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
          -F "file=@builds/wikipedia.apk")
        
        # Extract the app URL from response
        APP_URL=$(echo $RESPONSE | jq -r '.app_url')
        echo "BROWSERSTACK_APP_URL=$APP_URL" >> $GITHUB_ENV
        
        if [ -z "$APP_URL" ]; then
          echo "Failed to upload app to BrowserStack"
          echo "Response: $RESPONSE"
          exit 1
        fi
        
        echo "Successfully uploaded app to BrowserStack: $APP_URL"
      env:
        BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
        BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

    - name: Start backend services
      run: |
        # Start FastAPI server
        uvicorn backend.main:app --host 0.0.0.0 --port 8002 &
        sleep 5
        
        # Start Celery worker
        celery -A backend.queue.celery_app worker -l info &
        sleep 5

    - name: Submit and monitor test job
      env:
        BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
        BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
      run: |
        # Submit the job and get the job ID
        OUTPUT=$(python -m cli.main submit \
          --org-id "browserstack-demo" \
          --app-version-id "wikipedia-v1.0" \
          --target browserstack \
          --priority 5 \
          --test tests/appwright1.spec.js)
        
        # Extract job ID and check if it was captured
        JOB_ID=$(echo "$OUTPUT" | grep -o '[0-9]\+' | head -n1)
        if [ -z "$JOB_ID" ]; then
          echo "❌ Failed to get job ID from output:"
          echo "$OUTPUT"
          exit 1
        fi
        
        echo "Submitted job ID: $JOB_ID"
        
        # Poll for job completion
        MAX_RETRIES=30  # 5 minutes timeout (10 second intervals)
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          # Get job status
          STATUS_OUTPUT=$(python -m cli.main status job --job-id $JOB_ID)
          echo "Status output: $STATUS_OUTPUT"
          
          # Extract status
          if echo "$STATUS_OUTPUT" | grep -q "completed"; then
            echo "✅ Job completed successfully!"
            exit 0
          elif echo "$STATUS_OUTPUT" | grep -q "failed"; then
            echo "❌ Job failed!"
            exit 1
          fi
          
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "Waiting for job completion (attempt $RETRY_COUNT/$MAX_RETRIES)..."
          sleep 10
        done
        
        echo "❌ Timeout waiting for job completion"
        exit 1